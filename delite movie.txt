#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function prototypes
void adminLogin();
void userLogin();
void addFood();
void modifyFood();
void deleteFood();
void viewAllFood();
void placeOrder();
void saveFoodToFile();
void generateBill(int billId, char* username, char selectedFood[][50], int quantity[], int numItems, double foodPrices[], double* totalCost);
int totalItemsOrdered(int quantity[], int numItems);
void flushInput();

// Global variables
int isAdminLoggedIn = 0;
int foodCount = 0;
char foodItems[100][50]; // Store food item names
double foodPrices[100];  // Store food item prices
int quantity[10]; // Store quantities of items in the order
int numItems = 0; // Total number of items in the order

void flushInput() { 
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}


// Function to load food details from a file
void loadFoodFromFile() {
    FILE* foodFile = fopen("food.txt", "r");
    if (foodFile != NULL) {
        while (fscanf(foodFile, "%s %lf\n", foodItems[foodCount], &foodPrices[foodCount]) != EOF) {
            foodCount++;
        }
        fclose(foodFile);
    }
}
void saveFoodToFile() {
    FILE* foodFile = fopen("food.txt", "w");
    if (foodFile != NULL) {
        for (int i = 0; i < foodCount; i++) {
            fprintf(foodFile, "%s %.2lf\n", foodItems[i], foodPrices[i]);
        }
        fclose(foodFile);
        printf("Food details saved to file successfully.\n");
    } else {
        printf("Error saving food details to file.\n");
    }
}

int main() {
    loadFoodFromFile();

    int choice;
    while (1) {
        printf("Welcome to Food Ordering System\n");
        printf("1. Admin Login\n");
        printf("2. User Login\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");

        if (scanf("%d", &choice) != 1) { 
            flushInput(); 
            continue;
        }

        switch (choice) {
            case 1:
                adminLogin();
                break;
            case 2:
                userLogin();
                break;
            case 3:
                printf("Thank you for using Food Ordering System.\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}


   int totalItemsOrdered(int quantity[], int numItems) {
    int total = 0;
    for (int i = 0; i < numItems; i++) {
        total += quantity[i];
    }
    return total;
}
void adminLogin() {
    char username[20], password[20];

    printf("Admin Login\n");
    printf("Enter username: ");
    scanf("%s", username);
    printf("Enter password: ");
    scanf("%s", password);

    // For simplicity, we're using "admin" as the username and password
    if (strcmp(username, "admin") == 0 && strcmp(password, "admin") == 0) {
        isAdminLoggedIn = 1;
        printf("Admin login successful.\n");

        int adminChoice;
        while (1) {
            printf("Admin Functions:\n");
            printf("1. Add Food Details\n");
            printf("2. Modify Food Details\n");
            printf("3. Delete Food Details\n");
            printf("4. View All Food Items\n");
            printf("5. Logout\n");
            printf("Enter your choice: ");
            scanf("%d", &adminChoice);

            switch (adminChoice) {
                case 1:
                    addFood();
                    break;
                case 2:
                    modifyFood();
                    break;
                case 3:
                    deleteFood();
                    break;
                case 4:
                    viewAllFood();
                    break;
                case 5:
                    printf("Admin logout successful.\n");
                    saveFoodToFile(); // Save food details to a file before logout
                    return;
                default:
                    printf("Invalid choice. Please try again.\n");
            }
        }
    } else {
        printf("Invalid username or password. Please try again.\n");
    }
}

void addFood() {
    if (isAdminLoggedIn) {
        char foodName[50];
        double foodPrice;

        printf("Admin: Adding Food Details\n");
        printf("Enter Food Name: ");
        scanf("%s", foodName);
        printf("Enter Food Price: ");
        scanf("%lf", &foodPrice);

        // Add food details to arrays
        strcpy(foodItems[foodCount], foodName);
        foodPrices[foodCount] = foodPrice;
        foodCount++;

        printf("Food details added successfully.\n");
    } else {
        printf("You are not authorized to perform this action.\n");
    }
}

void modifyFood() {
    if (isAdminLoggedIn) {
        char foodName[50];
        double newFoodPrice;
        int found = 0;

        printf("Admin: Modifying Food Details\n");
        printf("Enter Food Name to Modify: ");
        scanf("%s", foodName);

        // Search for the food name and get its current price
        for (int i = 0; i < foodCount; i++) {
            if (strcmp(foodItems[i], foodName) == 0) {
                printf("Enter New Price: ");
                scanf("%lf", &newFoodPrice);

                // Update the food price
                foodPrices[i] = newFoodPrice;
                found = 1;

                printf("Food details modified successfully.\n");
                break;
            }
        }

        if (!found) {
            printf("Food not found.\n");
        }
    } else {
        printf("You are not authorized to perform this action.\n");
    }
}

void deleteFood() {
    if (isAdminLoggedIn) {
        char foodName[50];
        int found = 0;

        printf("Admin: Deleting Food Details\n");
        printf("Enter Food Name to Delete: ");
        scanf("%s", foodName);

        // Search for the food name and remove it from the arrays
        for (int i = 0; i < foodCount; i++) {
            if (strcmp(foodItems[i], foodName) == 0) {
                for (int j = i; j < foodCount - 1; j++) {
                    strcpy(foodItems[j], foodItems[j + 1]);
                    foodPrices[j] = foodPrices[j + 1];
                }
                foodCount--;
                found = 1;

                printf("Food details deleted successfully.\n");
                break;
            }
        }

        if (!found) {
            printf("Food not found.\n");
        }
    } else {
        printf("You are not authorized to perform this action.\n");
    }
}

void viewAllFood() {
    if (isAdminLoggedIn) {
        printf("Admin: Viewing All Food Items\n");

        printf("All Available Food Items:\n");
        for (int i = 0; i < foodCount; i++) {
            printf("%s - $%.2lf\n", foodItems[i], foodPrices[i]);
        }
    } else {
        printf("You are not authorized to perform this action.\n");
    }
}

void userLogin() {
    char username[20], password[20];

    printf("User Login\n");
    printf("Enter username: ");
    scanf("%s", username);
    printf("Enter password: ");
    scanf("%s", password);

    // For simplicity, we're using "user" as the username and password
    if (strcmp(username, "user") == 0 && strcmp(password, "user") == 0) {
        printf("User login successful.\n");

        int userChoice;
        while (1) {
            printf("User Functions:\n");
            printf("1. Place an Order\n");
            printf("2. View Total Items Ordered\n"); // Added option to view total items ordered
            printf("3. Logout\n");
            printf("Enter your choice: ");
            scanf("%d", &userChoice);

            switch (userChoice) {
                case 1:
                    placeOrder();
                    break;
                case 2:
                    printf("Total Items Ordered: %d\n", totalItemsOrdered(quantity, numItems));
                    break;
                case 3:
                    printf("User logout successful.\n");
                    return;
                default:
                    printf("Invalid choice. Please try again.\n");
            }
        }
    } else {
        printf("Invalid username or password. Please try again.\n");
    }
}

void placeOrder() {
    char selectedFood[10][50];
    double totalCost = 0.0;
    int billId = rand() % 1000 + 1;

    printf("User: Placing an Order\n");

    while (1) {
        printf("Available Food Items:\n");

        int itemNumber = 1;
        for (int i = 0; i < foodCount; i++) {
            printf("%d. %s - $%.2lf\n", itemNumber, foodItems[i], foodPrices[i]);
            itemNumber++;
        }

        printf("Enter the item number (0 to finish ordering): ");
        if (scanf("%d", &itemNumber) != 1) {
            flushInput();
            continue;
        }

        if (itemNumber == 0) {
            break; 
        }

        if (itemNumber < 1 || itemNumber > foodCount) {
            printf("Invalid item number. Please try again.\n");
            continue;
        }

        printf("Enter the quantity: ");
        if (scanf("%d", &quantity[numItems]) != 1) {
            flushInput();
            continue;
        }

        strcpy(selectedFood[numItems], foodItems[itemNumber - 1]);
        totalCost += foodPrices[itemNumber - 1] * quantity[numItems];
        numItems++;
    }

    generateBill(billId, "user", selectedFood, quantity, numItems, foodPrices, &totalCost);
}

   

// ... [Previous code remains unchanged up to the end of the 'placeOrder' function]

void generateBill(int billId, char* username, char selectedFood[][50], int quantity[], int numItems, double foodPrices[], double* totalCost) {
    printf("Generating Bill...\n");

    // Create a file for the bill
    char filename[50];
    sprintf(filename, "bill_%d.txt", billId);
    FILE* billFile = fopen(filename, "w");

    if (billFile != NULL) {
        fprintf(billFile, "Bill ID: %d\n", billId);
        fprintf(billFile, "User: %s\n", username);
        fprintf(billFile, "------------------------------------\n");
        fprintf(billFile, "Item\tQuantity\tPrice\tTotal Price\n");
        fprintf(billFile, "------------------------------------\n");

        // Write selected items, quantities, prices, and total prices to the bill
        for (int i = 0; i < numItems; i++) {
            double itemTotal = quantity[i] * foodPrices[i];
            fprintf(billFile, "%s\t%d\t\t$%.2lf\t$%.2lf\n", selectedFood[i], quantity[i], foodPrices[i], itemTotal);
        }

        fprintf(billFile, "------------------------------------\n");
        
        // Calculate and display the total cost
        fprintf(billFile, "Total Cost:\t\t$%.2lf\n", *totalCost);
        fclose(billFile);

        printf("Bill generated successfully. Bill ID: %d\n", billId);
        printf("\n------ Bill Details ------\n");
        printf("Bill ID: %d\n", billId);
        printf("User: %s\n", username);
        printf("------------------------------------\n");
        printf("Item\tQuantity\tPrice\tTotal Price\n");
        printf("------------------------------------\n");
        for (int i = 0; i < numItems; i++) {
            double itemTotal = quantity[i] * foodPrices[i];
            printf("%s\t%d\t\t$%.2lf\t$%.2lf\n", selectedFood[i], quantity[i], foodPrices[i], itemTotal);
        }
        printf("------------------------------------\n");
        printf("Total Cost:\t\t$%.2lf\n", *totalCost);
        printf("----------------------------\n");
    } else {
        printf("Error creating bill.\n");
    }
}

